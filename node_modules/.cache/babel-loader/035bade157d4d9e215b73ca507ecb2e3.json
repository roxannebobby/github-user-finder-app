{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\roxan\\\\onedrive\\\\documents\\\\lambdaweb49\\\\unit3\\\\sprint10\\\\github-user-finder-app\\\\src\\\\components\\\\users\\\\Search.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      text: ''\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault(); // we are checking if the state of text has any content; if it does not, we want to display the text, with the style 'light' (red color), otherwise we will return the requested users from the search\n\n      if (this.state.text === '') {\n        this.props.setAlert('Please enter search text ...', 'light');\n      } else {\n        // here we have to pass the value that is return upon submit (this.state.text) UP to the App component through props\n        // code below will send the state.text to a method called searchUsers; this prop sending UP (prop drilling) is why using Context and Hooks is a better method\n        // the process is this -- in the form, onSubmit calls on the method onSubmit (this method), in this method we are using the 'prop' of searchUsers, which we added on App.js inside the <Search />, and we pass this the content of this.state.text from the Search component, once passed to the App.js component, it calls another moethod (searchUsers) which uses the this.state.text content as a prop inside that method\n        this.props.searchUsers(this.state.text); // below code clears after sending\n\n        this.setState({\n          text: ''\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      showClear,\n      clearUsers\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"text\",\n          placeholder: \"Search for a User...\",\n          value: this.state.text,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"btn btn-dark btn-block\",\n          name: \"submit\",\n          value: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this), showClear && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-light btn-block\",\n        onClick: clearUsers,\n        children: \"clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nSearch.propTypes = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\nexport default Search;","map":{"version":3,"sources":["C:/users/roxan/onedrive/documents/lambdaweb49/unit3/sprint10/github-user-finder-app/src/components/users/Search.js"],"names":["React","Component","PropTypes","Search","state","text","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","setAlert","searchUsers","render","showClear","clearUsers","propTypes","func","isRequired","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;AAAA,SAE9BG,KAF8B,GAEtB;AACPC,MAAAA,IAAI,EAAE;AADC,KAFsB;;AAAA,SAqB9BC,QArB8B,GAqBlBC,CAAD,IAAO;AACjB,WAAKC,QAAL,CAAc;AAAE,SAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA5B,OAAd;AACA,KAvB6B;;AAAA,SA2B9BC,QA3B8B,GA2BlBL,CAAD,IAAO;AACjBA,MAAAA,CAAC,CAACM,cAAF,GADiB,CAGjB;;AACA,UAAI,KAAKT,KAAL,CAAWC,IAAX,KAAoB,EAAxB,EAA4B;AAC3B,aAAKS,KAAL,CAAWC,QAAX,CAAoB,8BAApB,EAAoD,OAApD;AACA,OAFD,MAEO;AACN;AACA;AAEA;AACA,aAAKD,KAAL,CAAWE,WAAX,CAAuB,KAAKZ,KAAL,CAAWC,IAAlC,EALM,CAMN;;AACA,aAAKG,QAAL,CAAc;AAAEH,UAAAA,IAAI,EAAE;AAAR,SAAd;AACA;AACD,KA1C6B;AAAA;;AA4C9BY,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA4B,KAAKL,KAAvC;AAEA,wBACC;AAAA,8BACC;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,QAAQ,EAAE,KAAKF,QAAtC;AAAA,gCACC;AACC,UAAA,IAAI,EAAC,MADN;AAEC,UAAA,IAAI,EAAC,MAFN;AAGC,UAAA,WAAW,EAAC,sBAHb;AAIC,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,IAJnB;AAKC,UAAA,QAAQ,EAAE,KAAKC;AALhB;AAAA;AAAA;AAAA;AAAA,gBADD,eASC;AACC,UAAA,IAAI,EAAC,QADN;AAEC,UAAA,SAAS,EAAC,wBAFX;AAGC,UAAA,IAAI,EAAC,QAHN;AAIC,UAAA,KAAK,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBATD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,EAiBEY,SAAS,iBACT;AAAQ,QAAA,SAAS,EAAC,yBAAlB;AAA4C,QAAA,OAAO,EAAEC,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAyBA;;AAxE6B;;AAAzBhB,M,CAMEiB,S,GAAY;AAClBJ,EAAAA,WAAW,EAAEd,SAAS,CAACmB,IAAV,CAAeC,UADV;AAElBH,EAAAA,UAAU,EAAEjB,SAAS,CAACmB,IAAV,CAAeC,UAFT;AAGlBJ,EAAAA,SAAS,EAAEhB,SAAS,CAACqB,IAAV,CAAeD,UAHR;AAIlBP,EAAAA,QAAQ,EAAEb,SAAS,CAACmB,IAAV,CAAeC;AAJP,C;AAqEpB,eAAenB,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Search extends Component {\r\n\t// whenever we have a form, we need to have some sort of state for any of the form fields that will be changed by the user; 'text' below is a 'slice of state' we want to monitor\r\n\tstate = {\r\n\t\ttext: '',\r\n\t};\r\n\r\n\tstatic propTypes = {\r\n\t\tsearchUsers: PropTypes.func.isRequired,\r\n\t\tclearUsers: PropTypes.func.isRequired,\r\n\t\tshowClear: PropTypes.bool.isRequired,\r\n\t\tsetAlert: PropTypes.func.isRequired,\r\n\t};\r\n\r\n\t// here we are creating a change event; every time the text input in the form changes (someone types in something) we can capture that event through the DOM (e.target.value); the e captures each individual event change that happens\r\n\r\n\t// the below text is for only one field; the actual code below being used is when we have more than one field\r\n\t// onChange = (e) => {\r\n\t// \tthis.setState({ text: e.target.value });\r\n\t// };\r\n\r\n\t//this code accounts for more than one input field; the e.target.name specifies each input field name, and the e.target.value captures the value for that particular field\r\n\tonChange = (e) => {\r\n\t\tthis.setState({ [e.target.name]: e.target.value });\r\n\t};\r\n\r\n\t// the below code is required in order to give action to the form's submit button; this.onSubmit is added to the form code below; if we do not use an arrow function here, we have to 'bind' the 'this' keyword before it will work, so use arrow functions to make it easier\r\n\t// additionally, the 'this' is needed because this is a class component\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// we are checking if the state of text has any content; if it does not, we want to display the text, with the style 'light' (red color), otherwise we will return the requested users from the search\r\n\t\tif (this.state.text === '') {\r\n\t\t\tthis.props.setAlert('Please enter search text ...', 'light');\r\n\t\t} else {\r\n\t\t\t// here we have to pass the value that is return upon submit (this.state.text) UP to the App component through props\r\n\t\t\t// code below will send the state.text to a method called searchUsers; this prop sending UP (prop drilling) is why using Context and Hooks is a better method\r\n\r\n\t\t\t// the process is this -- in the form, onSubmit calls on the method onSubmit (this method), in this method we are using the 'prop' of searchUsers, which we added on App.js inside the <Search />, and we pass this the content of this.state.text from the Search component, once passed to the App.js component, it calls another moethod (searchUsers) which uses the this.state.text content as a prop inside that method\r\n\t\t\tthis.props.searchUsers(this.state.text);\r\n\t\t\t// below code clears after sending\r\n\t\t\tthis.setState({ text: '' });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { showClear, clearUsers } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form className='form' onSubmit={this.onSubmit}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tname='text'\r\n\t\t\t\t\t\tplaceholder='Search for a User...'\r\n\t\t\t\t\t\tvalue={this.state.text}\r\n\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\tclassName='btn btn-dark btn-block'\r\n\t\t\t\t\t\tname='submit'\r\n\t\t\t\t\t\tvalue='Search'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t\t{showClear && (\r\n\t\t\t\t\t<button className='btn btn-light btn-block' onClick={clearUsers}>\r\n\t\t\t\t\t\tclear\r\n\t\t\t\t\t</button>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}