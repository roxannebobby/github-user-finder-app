{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\roxan\\\\onedrive\\\\documents\\\\lambdaweb49\\\\unit3\\\\sprint10\\\\github-user-finder-app\\\\src\\\\components\\\\users\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = _ref => {\n  _s();\n\n  let {\n    searchUsers,\n    clearUsers,\n    showClear\n  } = _ref;\n  // whenever we have a form, we need to have some sort of state for any of the form fields that will be changed by the user; 'text' below is a 'slice of state' we want to monitor\n  const {\n    text,\n    setText\n  } = useState('');\n\n  const onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (this.state.text === '') {\n      this.props.setAlert('Please enter search text ...', 'light');\n    } else {\n      this.props.searchUsers(this.state.text); // below code clears after sending\n\n      this.setState({\n        text: ''\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"text\",\n        placeholder: \"Search for a User...\",\n        value: this.state.text,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-dark btn-block\",\n        name: \"submit\",\n        value: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), showClear && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-light btn-block\",\n      onClick: clearUsers,\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Search, \"CY/RHZgPGOnGSDa2lC6cBRczU1I=\");\n\n_c = Search;\nSearch.propTypes = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/users/roxan/onedrive/documents/lambdaweb49/unit3/sprint10/github-user-finder-app/src/components/users/Search.js"],"names":["React","useState","PropTypes","Search","searchUsers","clearUsers","showClear","text","setText","onChange","e","setState","target","name","value","onSubmit","preventDefault","state","props","setAlert","propTypes","func","isRequired","bool"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,MAAM,GAAG,QAA4C;AAAA;;AAAA,MAA3C;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAA2C;AAC1D;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMQ,QAAQ,GAAIC,CAAD,IAAO;AACvB,SAAKC,QAAL,CAAc;AAAE,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA5B,KAAd;AACA,GAFD;;AAIA,QAAMC,QAAQ,GAAIL,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACM,cAAF;;AAEA,QAAI,KAAKC,KAAL,CAAWV,IAAX,KAAoB,EAAxB,EAA4B;AAC3B,WAAKW,KAAL,CAAWC,QAAX,CAAoB,8BAApB,EAAoD,OAApD;AACA,KAFD,MAEO;AACN,WAAKD,KAAL,CAAWd,WAAX,CAAuB,KAAKa,KAAL,CAAWV,IAAlC,EADM,CAEN;;AACA,WAAKI,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA;AACD,GAVD;;AAYA,sBACC;AAAA,4BACC;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAEQ,QAAjC;AAAA,8BACC;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,WAAW,EAAC,sBAHb;AAIC,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWV,IAJnB;AAKC,QAAA,QAAQ,EAAEE;AALX;AAAA;AAAA;AAAA;AAAA,cADD,eASC;AACC,QAAA,IAAI,EAAC,QADN;AAEC,QAAA,SAAS,EAAC,wBAFX;AAGC,QAAA,IAAI,EAAC,QAHN;AAIC,QAAA,KAAK,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,cATD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAiBEH,SAAS,iBACT;AAAQ,MAAA,SAAS,EAAC,yBAAlB;AAA4C,MAAA,OAAO,EAAED,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAyBA,CA7CD;;GAAMF,M;;KAAAA,M;AA+CNA,MAAM,CAACiB,SAAP,GAAmB;AAClBhB,EAAAA,WAAW,EAAEF,SAAS,CAACmB,IAAV,CAAeC,UADV;AAElBjB,EAAAA,UAAU,EAAEH,SAAS,CAACmB,IAAV,CAAeC,UAFT;AAGlBhB,EAAAA,SAAS,EAAEJ,SAAS,CAACqB,IAAV,CAAeD,UAHR;AAIlBH,EAAAA,QAAQ,EAAEjB,SAAS,CAACmB,IAAV,CAAeC;AAJP,CAAnB;AAOA,eAAenB,MAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Search = ({ searchUsers, clearUsers, showClear }) => {\r\n\t// whenever we have a form, we need to have some sort of state for any of the form fields that will be changed by the user; 'text' below is a 'slice of state' we want to monitor\r\n\tconst { text, setText } = useState('');\r\n\r\n\tconst onChange = (e) => {\r\n\t\tthis.setState({ [e.target.name]: e.target.value });\r\n\t};\r\n\r\n\tconst onSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (this.state.text === '') {\r\n\t\t\tthis.props.setAlert('Please enter search text ...', 'light');\r\n\t\t} else {\r\n\t\t\tthis.props.searchUsers(this.state.text);\r\n\t\t\t// below code clears after sending\r\n\t\t\tthis.setState({ text: '' });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form className='form' onSubmit={onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='text'\r\n\t\t\t\t\tplaceholder='Search for a User...'\r\n\t\t\t\t\tvalue={this.state.text}\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='submit'\r\n\t\t\t\t\tclassName='btn btn-dark btn-block'\r\n\t\t\t\t\tname='submit'\r\n\t\t\t\t\tvalue='Search'\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t\t{showClear && (\r\n\t\t\t\t<button className='btn btn-light btn-block' onClick={clearUsers}>\r\n\t\t\t\t\tclear\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nSearch.propTypes = {\r\n\tsearchUsers: PropTypes.func.isRequired,\r\n\tclearUsers: PropTypes.func.isRequired,\r\n\tshowClear: PropTypes.bool.isRequired,\r\n\tsetAlert: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}